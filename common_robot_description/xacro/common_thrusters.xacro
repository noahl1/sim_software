<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="common_thruster_macros">

  <xacro:include filename="$(find common_robot_description)/xacro/common_tags.xacro"/>
  <xacro:include filename="$(find common_robot_description)/xacro/common_links.xacro"/>
  <xacro:include filename="$(find common_robot_description)/xacro/common_joints.xacro"/>
  <xacro:include filename="$(find uuv_gazebo_ros_plugins)/urdf/snippets.xacro"/>

  <!-- Thruster Tags -->
  <xacro:property name="tag_thrust" value="thrust"/>
  <xacro:property name="tag_thruster" value="thruster"/>
  <xacro:property name="tag_conversion" value="thrust_conversion"/>
  <xacro:property name="tag_dynamics" value="dynamics"/>

  <!-- Load Blue Robotics T200 Data -->
  <xacro:property name="common_thrusters_file" value="$(find common_robot_description)/config/common_thrusters.yaml"/>
  <xacro:property name="common_thrusters_data" value="${load_yaml(common_thrusters_file)}"/>
  <xacro:property name="T200" value="${common_thrusters_data['T200']}"/>

  <xacro:macro name="uuv_thruster_t200_from_yaml" params="data">

    <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
    <xacro:standard_link_from_yaml name="${data[tag_link][tag_name]}" data="${T200[tag_link]}"/>
    <xacro:standard_joint_from_yaml data="${data[tag_joint]}" child="${data[tag_link][tag_name]}"/>

    <gazebo>
      <plugin name="${data[tag_link][tag_name]}_model" filename="libuuv_thruster_ros_plugin.so">

        <linkName>${data[tag_link][tag_name]}</linkName>
        <jointName>${data[tag_joint][tag_name]}</jointName>
        <thrusterID>${data[tag_id]}</thrusterID>

        <thrustMax>${T200[tag_limits][tag_thrust][tag_max]}</thrustMax>
        <thrustMin>${T200[tag_limits][tag_thrust][tag_min]}</thrustMin>

        <dynamics>
          <type>${T200[tag_gazebo][tag_dynamics]}</type>
        </dynamics>

        <!-- Basic curve
        Input: x
        Output: thrust
        Function: thrust = rotorConstant * x * abs(x)
        -->
        <conversion>
          <type>${T200[tag_gazebo][tag_conversion][tag_type]}</type>
          <rotorConstant>${T200[tag_gazebo][tag_conversion][tag_constant]}</rotorConstant>
        </conversion>

      </plugin>
    </gazebo>

    <gazebo reference="${data[tag_link][tag_name]}">
      <selfCollide>false</selfCollide>
    </gazebo>
  </xacro:macro>

  <xacro:macro name="uuv_thruster_from_yaml" params="data">

    <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
    <xacro:standard_link_from_yaml data="${data[tag_link][tag_name]}"/>
    <xacro:standard_joint_from_yaml data="${data[tag_joint]}" child="${data[tag_link][tag_name]}"/>

    <gazebo>
      <plugin name="${data[tag_link][tag_name]}_model" filename="libuuv_thruster_ros_plugin.so">

        <linkName>${data[tag_link][tag_name]}</linkName>
        <jointName>${data[tag_joint][tag_name]}</jointName>
        <thrusterID>${data[tag_id]}</thrusterID>

        <thrustMax>${data[tag_limits][tag_thrust][tag_max]}</thrustMax>
        <thrustMin>${data[tag_limits][tag_thrust][tag_min]}</thrustMin>

        <dynamics>
          <type>${data[tag_gazebo][tag_dynamics]}</type>
        </dynamics>

        <!-- Basic curve
        Input: x
        Output: thrust
        Function: thrust = rotorConstant * x * abs(x)
        -->
        <conversion>
          <type>${data[tag_gazebo][tag_conversion][tag_type]}</type>
          <rotorConstant>${data[tag_gazebo][tag_conversion][tag_constant]}</rotorConstant>
        </conversion>

      </plugin>
    </gazebo>

    <gazebo reference="${data[tag_link][tag_name]}">
      <selfCollide>false</selfCollide>
    </gazebo>
  </xacro:macro>

</robot>
